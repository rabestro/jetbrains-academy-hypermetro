{"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":94},"title":"","narrative":""},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":31},"title":"Dijkstra's Algorithm","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":94},"title":"","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":78},"title":"","narrative":""},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":734},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":78},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":47},"title":"Breadth First Search Algorithm","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":0},"title":"","narrative":""},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":47},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":15},"title":"","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":138},"title":"","narrative":""},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":105},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":113},"title":"","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"","narrative":""},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":23},"title":"","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":822},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":96},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":51},"title":"Breadth First Search Algorithm","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"","narrative":""},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":29},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"","narrative":""}}