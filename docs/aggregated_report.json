{"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":124},"title":"","narrative":""},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":232},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":1289},"title":"","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":144},"title":"","narrative":""},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":38},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1293},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":685},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":498},"title":"Breadth First Search Algorithm","narrative":""},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":30},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":281},"title":"Command: /add-head","narrative":""},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":43},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":156},"title":"Command: /append","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["GetLine"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":680},"title":"","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["GetLine"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":82},"title":"","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":119},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":100},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":123},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":183},"title":"","narrative":""},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":65},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":1169},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":1,"successRate":0.3333333333333333,"time":69},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":119},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":6},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":86},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":38},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":154},"title":"","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":1,"successRate":0.3333333333333333,"time":177},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":84},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":1,"successRate":0.3333333333333333,"time":152},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":138},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":123},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":1,"errors":2,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":0,"successRate":0.0,"time":187},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":1,"successRate":0.3333333333333333,"time":155},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":2,"successRate":0.6666666666666666,"time":280},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":210},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":85},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":110},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":67},"title":"","narrative":""},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":31},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":918},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":82},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":33},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":14},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":50},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":34},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":102},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":62},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":116},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":141},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":71},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":28},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":992},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":92},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":39},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":63},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":37},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":22},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":134},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":38},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":354},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":126},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":62},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":22},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":785},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":75},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":33},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":15},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":89},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":48},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":16},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":133},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":544},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":598},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":129},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":624},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":151},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":471},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["Append","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":152},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":180},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":187},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":16},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":93},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":69},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":60},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":20},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":658},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":62},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":31},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":15},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":62},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":31},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":15},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":1,"successRate":0.5,"time":630},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":19},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":80},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":108},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":84},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":25},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":3,"successRate":0.6,"time":864},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":62},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":34},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":14},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":63},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":41},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":16},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":206},"title":"Model of Metro Line","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":228},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":82},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":67},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":56},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":40},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":3,"successRate":0.6,"time":780},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":64},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":26},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":57},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":32},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":12},"title":"Repository of Metro Map","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":0,"totalFeatures":5,"passed":0,"successRate":1.0,"time":594},"title":"Metro Service","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":956},"title":"Metro Service","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":1,"successRate":0.0,"time":149},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":21},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":85},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":88},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":65},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":894},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":58},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":23},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":41},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":22},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":194},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":86},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":65},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":81},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":18},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":641},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":75},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":24},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":55},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":32},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":15},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with only station id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"Model of Metro Station","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":169},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":12},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":74},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":9},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":78},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":104},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":15},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":651},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":65},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":27},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":69},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":26},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":216},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":12},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":121},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":11},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":91},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":47},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":21},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":760},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":68},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":26},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":8},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":47},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":30},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":16},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":1,"successRate":0.5,"time":849},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":16},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":92},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":31},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":101},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":60},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":15},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":0,"totalFeatures":5,"passed":0,"successRate":1.0,"time":14},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":69},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":14},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":60},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":36},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":171},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":80},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":15},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":70},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":0,"totalFeatures":5,"passed":0,"successRate":1.0,"time":27},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":108},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":40},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":28},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":101},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":85},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":18},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":3,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":2,"successRate":0.4,"time":261},"title":"Metro Service","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":138},"title":"Metro Service","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":189},"title":"Metro Service","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":166},"title":"Metro Service","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":201},"title":"Metro Service","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":546},"title":"Metro Service","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":510},"title":"Metro Service","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":176},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":89},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":71},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":52},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":20},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":266},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":73},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":21},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":42},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search Algorithm algorithm is is a simple and efficient \nalgorithm for finding the shortest paths between nodes in the graph."},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":27},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":25},"title":"Repository of Metro Map","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":550},"title":"Metro Service","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":237},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":16},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":96},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":22},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":136},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":85},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":27},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":303},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":82},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":42},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":15},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":57},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":37},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":17},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":181},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":137},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":75},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":62},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":21},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":299},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":71},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":13},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":78},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":33},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":9},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":12},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":195},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":124},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":17},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":98},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":66},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":22},"title":"Command: /connect","narrative":""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":393},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":113},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":45},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":72},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":42},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":16},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":51},"title":"Repository of Metro Map","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find a metro station by id","should find metro line by name","should load a metro map"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":112},"title":"Repository of Metro Map","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find a metro station by id","should find metro line by name","should load a metro map"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":103},"title":"Repository of Metro Map","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find a metro station by id","should find metro line by name","should load a metro map"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":2,"successRate":0.6666666666666666,"time":273},"title":"Repository of Metro Map","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find a metro station by id","should find metro line by name","should load a metro map"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":193},"title":"Repository of Metro Map","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find a metro station by id","should find metro line by name","should load a metro map"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":2,"successRate":0.6666666666666666,"time":203},"title":"Repository of Metro Map","narrative":""},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name","should load a metro map"],"ignoredFeatures":["should find a metro station by id"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":2,"totalFeatures":3,"passed":2,"successRate":1.0,"time":238},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":227},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":18},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":86},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":17},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":97},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":62},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":19},"title":"Command: /connect","narrative":"Connect the stations using the command /connect \"[line 1]\" \"[station 1]\" \"[line 2]\" \"[station 2]\""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":298},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":71},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":32},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":47},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":51},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name","should load a metro map"],"ignoredFeatures":["should find a metro station by id"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":2,"totalFeatures":3,"passed":2,"successRate":1.0,"time":135},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":213},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":17},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":99},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":18},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":94},"title":"Command: /remove","narrative":""},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":66},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":21},"title":"Command: /connect","narrative":"Connect the stations using the command /connect \"[line 1]\" \"[station 1]\" \"[line 2]\" \"[station 2]\""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":334},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":66},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":34},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":23},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":65},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":34},"title":"","narrative":""},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name","should load a metro map"],"ignoredFeatures":["should find a metro station by id"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":2,"totalFeatures":3,"passed":2,"successRate":1.0,"time":127},"title":"Repository of Metro Map","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":128},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":122},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":155},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return edges for a given node"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":632},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":131},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":620},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":586},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":0,"successRate":0.0,"time":506},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":144},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":158},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for an empty graph","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":132},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for an empty graph","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":120},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for an empty graph","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":56},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for an empty graph","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":174},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for any one node path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":205},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should calculate distance for a path","should return 0 for an empty path","should return 0 for any one node path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":145},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":161},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":137},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":73},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":105},"title":"Command: /remove","narrative":"Remove a metro station"},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":69},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":19},"title":"Command: /connect","narrative":"Connect the stations using the command /connect \"[line 1]\" \"[station 1]\" \"[line 2]\" \"[station 2]\""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":353},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":83},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":29},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":58},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":36},"title":"Abstract HyperMetro Command","narrative":"Contains method to validate number of parameters"},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name","should load a metro map"],"ignoredFeatures":["should find a metro station by id"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":2,"totalFeatures":3,"passed":2,"successRate":1.0,"time":120},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":172},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":192},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":56},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":13},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":63},"title":"Command: /remove","narrative":"Remove a metro station"},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":53},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":18},"title":"Command: /connect","narrative":"Connect the stations using the command /connect \"[line 1]\" \"[station 1]\" \"[line 2]\" \"[station 2]\""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":262},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":66},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":27},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":43},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":30},"title":"Abstract HyperMetro Command","narrative":"Contains method to validate number of parameters"},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":11},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name","should load a metro map"],"ignoredFeatures":["should find a metro station by id"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":2,"totalFeatures":3,"passed":2,"successRate":1.0,"time":81},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":221},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":157},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":78},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":19},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":85},"title":"Command: /remove","narrative":"Remove a metro station"},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":67},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":18},"title":"Command: /connect","narrative":"Connect the stations using the command /connect \"[line 1]\" \"[station 1]\" \"[line 2]\" \"[station 2]\""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":351},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":74},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":26},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":10},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":44},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":26},"title":"Abstract HyperMetro Command","narrative":"Contains method to validate number of parameters"},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":12},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name","should load a metro map"],"ignoredFeatures":["should find a metro station by id"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":2,"totalFeatures":3,"passed":2,"successRate":1.0,"time":104},"title":"Repository of Metro Map","narrative":""},"metro.model.MetroLineSpec":{"executedFeatures":["should append a station to the empty line","should get the name of the metro line"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":191},"title":"Model of Metro Line","narrative":""},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":134},"title":"Graph","narrative":"A simple implementation of Graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find the fastest route for a complex graph","should find the fastest route for a medium graph","should find the fastest route for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":66},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.model.MetroStationSpec":{"executedFeatures":["should create a metro station with id and time"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":14},"title":"Model of Metro Station","narrative":""},"metro.command.RemoveSpec":{"executedFeatures":["should execute remove command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":78},"title":"Command: /remove","narrative":"Remove a metro station"},"metro.controller.ParameterParserSpec":{"executedFeatures":["should parse parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":57},"title":"Command's parameters parser","narrative":"if the name of the line or station consists of several words, \nyou should write it in quotation marks (after, they should be \nexcluded from the name). If the name of a station consists \nof one word it should be parseable with or without quotes."},"metro.command.ConnectSpec":{"executedFeatures":["should execute connect command","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":20},"title":"Command: /connect","narrative":"Connect the stations using the command /connect \"[line 1]\" \"[station 1]\" \"[line 2]\" \"[station 2]\""},"metro.service.MetroServiceImplSpec":{"executedFeatures":["should add a new station at the beginning of metro line","should append a new station at the end of the line","should connect the source station to the target station","should remove the metro station from the metro map","should return metro line by it's name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":261},"title":"Metro Service","narrative":""},"metro.controller.BrokerSpec":{"executedFeatures":["should execute correct command","should print error messages","should reject invalid command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":65},"title":"Commands Broker","narrative":"The broker parse the user input and execute appropriate commands"},"metro.ApplicationSpec":{"executedFeatures":["should load metro map and start CLI","should print a message in case of error"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":29},"title":"HyperMetro Application","narrative":""},"metro.command.AddHeadSpec":{"executedFeatures":["should check number of parameters","should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":10},"title":"Command: /add-head","narrative":"add-head adds a new station at the beginning of the metro line"},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find the shortest path for a complex graph","should find the shortest path for a simple graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":45},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.command.HyperMetroCommandSpec":{"executedFeatures":["should not throw an exception for correct number of parameters","should throw an exception for incorrect number of parameters"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":10,"totalFeatures":2,"passed":10,"successRate":1.0,"time":35},"title":"Abstract HyperMetro Command","narrative":"Contains method to validate number of parameters"},"metro.command.AppendSpec":{"executedFeatures":["should check number of parameters","should execute append command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":10},"title":"Command: /append","narrative":"Append adds a new station at the end of the line"},"metro.repository.MetroRepositoryImpSpec":{"executedFeatures":["should find metro line by name","should load a metro map"],"ignoredFeatures":["should find a metro station by id"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":2,"totalFeatures":3,"passed":2,"successRate":1.0,"time":94},"title":"Repository of Metro Map","narrative":""}}